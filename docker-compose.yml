services:
  db:
    # env_file:
    #   - path: ./.env
    #     required: true

    container_name: db
    image: postgres:16.3
    network_mode: "host"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./postgresql_data/:/var/lib/postgresql/data
      - ./dvdrental.tar:/var/dvdrental.tar
      - ./db_entrypoint/init.sh:/var/init.sh
      # - ./db_entrypoint/init.sh:/docker-entrypoint-initdb.d/init.sh
      # ./init-database.sh:/docker-entrypoint-initdb.d/init-database.sh
    # user: ${POSTGRES_USER}
    # ports:
    #   - '5432:5432'
    # restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5
    # command: /bin/bash -c "until pg_isready -U ${POSTGRES_USER}; do sleep 1; done && pg_restore -U ${POSTGRES_USER} -d ${POSTGRES_DB} /var/dvdrental.tar"
    # command: /bin/bash -c "until pg_isready --username=postgres --host=postgres; do sleep 1; done && psql --username=postgres --host=postgres --list"
    # command: /bin/bash -c "ls /var/lib/postgresql/data/"
    # command: /bin/bash -c "psql -U postgres -c '\l'"
    # entrypoint: /bin/bash -c
    # CMD: ["postgres", "&&", "pg_restore", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}", "/var/dvdrental.tar"]
    # entrypoint: docker-entrypoint.sh
    # command: /bin/bash -c "
    #   postgres &&
    #   until pg_isready -U ${POSTGRES_USER}; do sleep 1; done &&
    #   pg_restore -U ${POSTGRES_USER} -d ${POSTGRES_DB} /var/dvdrental.tar"
    # command: postgres
  
  # db_init:
  #   image: postgres:16.3
  #   network_mode: "host"
  #   environment:
  #     - POSTGRES_USER=${POSTGRES_USER}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #   volumes:
  #     - ./dvdrental.tar:/var/dvdrental.tar
  #   command: bash -c "pg_restore -U ${POSTGRES_USER} -d ${POSTGRES_DB} /var/dvdrental.tar"
  #   depends_on:
  #     - db


